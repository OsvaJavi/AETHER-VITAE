# -*- coding: utf-8 -*-
"""Download_papers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1envyvQsoPYJRD5HoJeqbRvzkDEXjQwS4
"""

pip install selenium webdriver-manager pandas

pip install requests

pip install beautifulsoup4

pip install pandas

pip install lxml

pip install selenium pandas requests

pip install webdriver-manager

from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service

def setup_chrome_driver():
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')

    # Configurar descargas
    chrome_options.add_experimental_option('prefs', {
        'download.default_directory': os.path.abspath(DOWNLOAD_DIR),
        'download.prompt_for_download': False,
        'plugins.always_open_pdf_externally': True,
    })

    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

import pandas as pd
import time
import os
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import requests

# Configuraci√≥n
CSV_URL = "https://raw.githubusercontent.com/jgalazka/SB_publications/refs/heads/main/SB_publication_PMC.csv"
DOWNLOAD_DIR = "nasa_pdfs2"
DELAY_BETWEEN_REQUESTS = 3  # segundos entre descargas

def setup_download_directory():
    """Crear directorio de descarga si no existe"""
    if not os.path.exists(DOWNLOAD_DIR):
        os.makedirs(DOWNLOAD_DIR)
        print(f"Directorio '{DOWNLOAD_DIR}' creado")

def setup_chrome_driver():
    """Configurar ChromeDriver para descargas autom√°ticas"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')  # Ejecutar en segundo plano
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')

    # Configurar descarga autom√°tica de PDFs
    chrome_options.add_experimental_option('prefs', {
        'download.default_directory': os.path.abspath(DOWNLOAD_DIR),
        'download.prompt_for_download': False,
        'download.directory_upgrade': True,
        'plugins.always_open_pdf_externally': True,
        'profile.default_content_settings.popups': 0,
    })

    driver = webdriver.Chrome(options=chrome_options)
    return driver

def find_and_click_pdf_button(driver, article_url):
    """Navegar a la p√°gina y encontrar/hacer clic en el bot√≥n del PDF"""
    try:
        print(f"  üåê Navegando a: {article_url}")
        driver.get(article_url)

        # Esperar a que la p√°gina cargue
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.TAG_NAME, "body"))
        )

        # Estrategia 1: Buscar botones que contengan "PDF", "Download", "View PDF", etc.
        pdf_keywords = ['pdf', 'download', 'full text', 'view pdf', 'article pdf']

        for keyword in pdf_keywords:
            try:
                # Buscar por texto del enlace
                elements = driver.find_elements(By.XPATH, f"//a[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '{keyword}')]")
                for element in elements:
                    if element.is_displayed() and element.is_enabled():
                        print(f"  üîç Encontrado bot√≥n: {element.text}")
                        element.click()
                        time.sleep(2)
                        return True
            except:
                continue

        # Estrategia 2: Buscar im√°genes de botones PDF
        try:
            pdf_buttons = driver.find_elements(By.XPATH, "//img[contains(@src, 'pdf')]")
            for button in pdf_buttons:
                parent = button.find_element(By.XPATH, "..")
                if parent.tag_name == 'a' and parent.is_displayed():
                    print("  üîç Encontrado bot√≥n PDF por imagen")
                    parent.click()
                    time.sleep(2)
                    return True
        except:
            pass

        # Estrategia 3: Buscar en iframes
        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        for iframe in iframes:
            try:
                driver.switch_to.frame(iframe)
                pdf_elements = driver.find_elements(By.XPATH, "//a[contains(translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), 'pdf')]")
                for element in pdf_elements:
                    if element.is_displayed():
                        print("  üîç Encontrado PDF en iframe")
                        element.click()
                        time.sleep(2)
                        driver.switch_to.default_content()
                        return True
                driver.switch_to.default_content()
            except:
                driver.switch_to.default_content()
                continue

        print("  ‚ùå No se pudo encontrar el bot√≥n del PDF")
        return False

    except Exception as e:
        print(f"  ‚ùå Error navegando: {e}")
        return False

def extract_pdf_url_from_page(driver):
    """Extraer la URL real del PDF despu√©s de hacer clic"""
    try:
        # Verificar si estamos en una p√°gina PDF
        current_url = driver.current_url
        if current_url.lower().endswith('.pdf'):
            print(f"  üìé URL PDF directa: {current_url}")
            return current_url

        # Buscar iframes que contengan PDFs
        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        for iframe in iframes:
            try:
                src = iframe.get_attribute('src')
                if src and '.pdf' in src.lower():
                    print(f"  üìé PDF en iframe: {src}")
                    return src
            except:
                continue

        # Buscar meta tags
        meta_tags = driver.find_elements(By.XPATH, "//meta[@name='citation_pdf_url']")
        for meta in meta_tags:
            pdf_url = meta.get_attribute('content')
            if pdf_url:
                print(f"  üìé PDF en meta tag: {pdf_url}")
                return pdf_url

        return None

    except Exception as e:
        print(f"  ‚ùå Error extrayendo URL PDF: {e}")
        return None

def download_pdf_selenium(driver, article_name, article_url):
    """Descargar PDF usando Selenium"""
    try:
        print(f"Procesando: {article_name}")

        # Navegar y hacer clic en el bot√≥n PDF
        if not find_and_click_pdf_button(driver, article_url):
            return False

        # Esperar a que cargue la p√°gina del PDF
        time.sleep(3)

        # Intentar extraer la URL del PDF
        pdf_url = extract_pdf_url_from_page(driver)

        if pdf_url:
            # Descargar usando requests
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }

            response = requests.get(pdf_url, headers=headers, timeout=30)
            response.raise_for_status()

            # Verificar que sea un PDF v√°lido
            if response.content.startswith(b'%PDF'):
                # Crear nombre de archivo seguro
                safe_name = "".join(c for c in article_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                safe_name = safe_name[:100]
                filename = f"{safe_name}.pdf"
                filepath = os.path.join(DOWNLOAD_DIR, filename)

                # Guardar el PDF
                with open(filepath, 'wb') as f:
                    f.write(response.content)

                file_size = os.path.getsize(filepath)
                print(f"  ‚úÖ PDF descargado: {filename} ({file_size} bytes)")
                return True
            else:
                print("  ‚ùå El contenido no es un PDF v√°lido")
                return False
        else:
            print("  ‚ùå No se pudo obtener la URL del PDF")
            return False

    except Exception as e:
        print(f"  ‚ùå Error descargando PDF: {e}")
        return False

def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando descarga de art√≠culos de NASA con Selenium...")

    # Configurar directorio
    setup_download_directory()

    driver = None
    try:
        # Descargar el CSV
        print("üì• Descargando lista de art√≠culos...")
        df = pd.read_csv(CSV_URL)
        print(f"üìä Se encontraron {len(df)} art√≠culos en el CSV")

        # Configurar ChromeDriver
        print("üõ†Ô∏è Configurando ChromeDriver...")
        driver = setup_chrome_driver()

        # Detectar columnas autom√°ticamente
        columns = list(df.columns)
        title_col = columns[0]  # Primera columna como t√≠tulo
        url_col = columns[1]    # Segunda columna como URL

        print(f"üìù Usando columna de t√≠tulo: '{title_col}'")
        print(f"üîó Usando columna de URL: '{url_col}'")

        # Contadores
        successful_downloads = 0
        failed_downloads = 0

        # Procesar cada art√≠culo (limitar para prueba)
        for index, row in df.iterrows():
            article_name = row[title_col]
            article_url = row[url_col]

            if pd.isna(article_name) or pd.isna(article_url):
                print(f"‚ö†Ô∏è Fila {index+1} tiene datos faltantes, saltando...")
                failed_downloads += 1
                continue

            # Limpiar URL
            if isinstance(article_url, str):
                article_url = article_url.strip()

            # Descargar PDF
            if download_pdf_selenium(driver, article_name, article_url):
                successful_downloads += 1
            else:
                failed_downloads += 1
                # Guardar error
                with open("failed_downloads.txt", "a", encoding="utf-8") as f:
                    f.write(f"{article_name}\t{article_url}\n")

            # Esperar entre descargas
            if index < len(df) - 1:
                wait_time = DELAY_BETWEEN_REQUESTS + random.uniform(1, 3)
                print(f"‚è≥ Esperando {wait_time:.1f} segundos...\n")
                time.sleep(wait_time)

        # Resumen final
        print("\n" + "="*50)
        print("üìä RESUMEN DE DESCARGA")
        print(f"‚úÖ Descargas exitosas: {successful_downloads}")
        print(f"‚ùå Descargas fallidas: {failed_downloads}")
        print(f"üìÅ Archivos guardados en: {os.path.abspath(DOWNLOAD_DIR)}")

    except Exception as e:
        print(f"‚ùå Error general: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if driver:
            driver.quit()
            print("üîö ChromeDriver cerrado")

if __name__ == "__main__":
    main()

from google.colab import drive
drive.mount('/content/drive')

# Copiar la carpeta a tu Drive
!cp -r nasa_pdfs /content/drive/MyDrive/